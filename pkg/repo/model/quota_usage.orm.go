package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// QuotaUsageN is a QuotaUsage object, all fields are nullable
type QuotaUsageN struct {
	original        *quotaUsageOriginal
	quotaUsageModel *QuotaUsageModel

	Id        null.Int    `json:"id"`
	UserId    null.Int    `json:"user_id"`
	Used      null.Int    `json:"used"`
	QuotaIds  null.String `json:"quota_ids"`
	Debt      null.Int    `json:"debt"`
	Meta      null.String `json:"meta"`
	CreatedAt null.Time
	UpdatedAt null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *QuotaUsageN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for QuotaUsage
func (inst *QuotaUsageN) SetModel(quotaUsageModel *QuotaUsageModel) {
	inst.quotaUsageModel = quotaUsageModel
}

// quotaUsageOriginal is an object which stores original QuotaUsage from database
type quotaUsageOriginal struct {
	Id        null.Int
	UserId    null.Int
	Used      null.Int
	QuotaIds  null.String
	Debt      null.Int
	Meta      null.String
	CreatedAt null.Time
	UpdatedAt null.Time
}

// Staled identify whether the object has been modified
func (inst *QuotaUsageN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &quotaUsageOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.Used != inst.original.Used {
			return true
		}
		if inst.QuotaIds != inst.original.QuotaIds {
			return true
		}
		if inst.Debt != inst.original.Debt {
			return true
		}
		if inst.Meta != inst.original.Meta {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "used":
				if inst.Used != inst.original.Used {
					return true
				}
			case "quota_ids":
				if inst.QuotaIds != inst.original.QuotaIds {
					return true
				}
			case "debt":
				if inst.Debt != inst.original.Debt {
					return true
				}
			case "meta":
				if inst.Meta != inst.original.Meta {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *QuotaUsageN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &quotaUsageOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.Used != inst.original.Used {
			kv["used"] = inst.Used
		}
		if inst.QuotaIds != inst.original.QuotaIds {
			kv["quota_ids"] = inst.QuotaIds
		}
		if inst.Debt != inst.original.Debt {
			kv["debt"] = inst.Debt
		}
		if inst.Meta != inst.original.Meta {
			kv["meta"] = inst.Meta
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "used":
				if inst.Used != inst.original.Used {
					kv["used"] = inst.Used
				}
			case "quota_ids":
				if inst.QuotaIds != inst.original.QuotaIds {
					kv["quota_ids"] = inst.QuotaIds
				}
			case "debt":
				if inst.Debt != inst.original.Debt {
					kv["debt"] = inst.Debt
				}
			case "meta":
				if inst.Meta != inst.original.Meta {
					kv["meta"] = inst.Meta
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *QuotaUsageN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.quotaUsageModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.quotaUsageModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a quota_usage
func (inst *QuotaUsageN) Delete(ctx context.Context) error {
	if inst.quotaUsageModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.quotaUsageModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *QuotaUsageN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type quotaUsageScope struct {
	name  string
	apply func(builder query.Condition)
}

var quotaUsageGlobalScopes = make([]quotaUsageScope, 0)
var quotaUsageLocalScopes = make([]quotaUsageScope, 0)

// AddGlobalScopeForQuotaUsage assign a global scope to a model
func AddGlobalScopeForQuotaUsage(name string, apply func(builder query.Condition)) {
	quotaUsageGlobalScopes = append(quotaUsageGlobalScopes, quotaUsageScope{name: name, apply: apply})
}

// AddLocalScopeForQuotaUsage assign a local scope to a model
func AddLocalScopeForQuotaUsage(name string, apply func(builder query.Condition)) {
	quotaUsageLocalScopes = append(quotaUsageLocalScopes, quotaUsageScope{name: name, apply: apply})
}

func (m *QuotaUsageModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range quotaUsageGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range quotaUsageLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *QuotaUsageModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *QuotaUsageModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type QuotaUsage struct {
	Id        int64  `json:"id"`
	UserId    int64  `json:"user_id"`
	Used      int64  `json:"used"`
	QuotaIds  string `json:"quota_ids"`
	Debt      int64  `json:"debt"`
	Meta      string `json:"meta"`
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (w QuotaUsage) ToQuotaUsageN(allows ...string) QuotaUsageN {
	if len(allows) == 0 {
		return QuotaUsageN{

			Id:        null.IntFrom(int64(w.Id)),
			UserId:    null.IntFrom(int64(w.UserId)),
			Used:      null.IntFrom(int64(w.Used)),
			QuotaIds:  null.StringFrom(w.QuotaIds),
			Debt:      null.IntFrom(int64(w.Debt)),
			Meta:      null.StringFrom(w.Meta),
			CreatedAt: null.TimeFrom(w.CreatedAt),
			UpdatedAt: null.TimeFrom(w.UpdatedAt),
		}
	}

	res := QuotaUsageN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "used":
			res.Used = null.IntFrom(int64(w.Used))
		case "quota_ids":
			res.QuotaIds = null.StringFrom(w.QuotaIds)
		case "debt":
			res.Debt = null.IntFrom(int64(w.Debt))
		case "meta":
			res.Meta = null.StringFrom(w.Meta)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w QuotaUsage) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *QuotaUsageN) ToQuotaUsage() QuotaUsage {
	return QuotaUsage{

		Id:        w.Id.Int64,
		UserId:    w.UserId.Int64,
		Used:      w.Used.Int64,
		QuotaIds:  w.QuotaIds.String,
		Debt:      w.Debt.Int64,
		Meta:      w.Meta.String,
		CreatedAt: w.CreatedAt.Time,
		UpdatedAt: w.UpdatedAt.Time,
	}
}

// QuotaUsageModel is a model which encapsulates the operations of the object
type QuotaUsageModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var quotaUsageTableName = "quota_usage"

// QuotaUsageTable return table name for QuotaUsage
func QuotaUsageTable() string {
	return quotaUsageTableName
}

const (
	FieldQuotaUsageId        = "id"
	FieldQuotaUsageUserId    = "user_id"
	FieldQuotaUsageUsed      = "used"
	FieldQuotaUsageQuotaIds  = "quota_ids"
	FieldQuotaUsageDebt      = "debt"
	FieldQuotaUsageMeta      = "meta"
	FieldQuotaUsageCreatedAt = "created_at"
	FieldQuotaUsageUpdatedAt = "updated_at"
)

// QuotaUsageFields return all fields in QuotaUsage model
func QuotaUsageFields() []string {
	return []string{
		"id",
		"user_id",
		"used",
		"quota_ids",
		"debt",
		"meta",
		"created_at",
		"updated_at",
	}
}

func SetQuotaUsageTable(tableName string) {
	quotaUsageTableName = tableName
}

// NewQuotaUsageModel create a QuotaUsageModel
func NewQuotaUsageModel(db query.Database) *QuotaUsageModel {
	return &QuotaUsageModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           quotaUsageTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *QuotaUsageModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *QuotaUsageModel) clone() *QuotaUsageModel {
	return &QuotaUsageModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *QuotaUsageModel) WithoutGlobalScopes(names ...string) *QuotaUsageModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *QuotaUsageModel) WithLocalScopes(names ...string) *QuotaUsageModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *QuotaUsageModel) Condition(builder query.SQLBuilder) *QuotaUsageModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *QuotaUsageModel) Find(ctx context.Context, id int64) (*QuotaUsageN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *QuotaUsageModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *QuotaUsageModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *QuotaUsageModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]QuotaUsageN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *QuotaUsageModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]QuotaUsageN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"user_id",
			"used",
			"quota_ids",
			"debt",
			"meta",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "used":
			selectFields = append(selectFields, f)
		case "quota_ids":
			selectFields = append(selectFields, f)
		case "debt":
			selectFields = append(selectFields, f)
		case "meta":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*QuotaUsageN, []interface{}) {
		var quotaUsageVar QuotaUsageN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &quotaUsageVar.Id)
			case "user_id":
				scanFields = append(scanFields, &quotaUsageVar.UserId)
			case "used":
				scanFields = append(scanFields, &quotaUsageVar.Used)
			case "quota_ids":
				scanFields = append(scanFields, &quotaUsageVar.QuotaIds)
			case "debt":
				scanFields = append(scanFields, &quotaUsageVar.Debt)
			case "meta":
				scanFields = append(scanFields, &quotaUsageVar.Meta)
			case "created_at":
				scanFields = append(scanFields, &quotaUsageVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &quotaUsageVar.UpdatedAt)
			}
		}

		return &quotaUsageVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	quotaUsages := make([]QuotaUsageN, 0)
	for rows.Next() {
		quotaUsageReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		quotaUsageReal.original = &quotaUsageOriginal{}
		_ = query.Copy(quotaUsageReal, quotaUsageReal.original)

		quotaUsageReal.SetModel(m)
		quotaUsages = append(quotaUsages, *quotaUsageReal)
	}

	return quotaUsages, nil
}

// First return first result for given query
func (m *QuotaUsageModel) First(ctx context.Context, builders ...query.SQLBuilder) (*QuotaUsageN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new quota_usage to database
func (m *QuotaUsageModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all quota_usages to database
func (m *QuotaUsageModel) SaveAll(ctx context.Context, quotaUsages []QuotaUsageN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, quotaUsage := range quotaUsages {
		id, err := m.Save(ctx, quotaUsage)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a quota_usage to database
func (m *QuotaUsageModel) Save(ctx context.Context, quotaUsage QuotaUsageN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, quotaUsage.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new quota_usage or update it when it has a id > 0
func (m *QuotaUsageModel) SaveOrUpdate(ctx context.Context, quotaUsage QuotaUsageN, onlyFields ...string) (id int64, updated bool, err error) {
	if quotaUsage.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, quotaUsage.Id.Int64, quotaUsage, onlyFields...)
		return quotaUsage.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, quotaUsage, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *QuotaUsageModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *QuotaUsageModel) Update(ctx context.Context, builder query.SQLBuilder, quotaUsage QuotaUsageN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, quotaUsage.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *QuotaUsageModel) UpdateById(ctx context.Context, id int64, quotaUsage QuotaUsageN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, quotaUsage.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *QuotaUsageModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *QuotaUsageModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
