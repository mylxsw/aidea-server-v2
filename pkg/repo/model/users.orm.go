package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// UsersN is a Users object, all fields are nullable
type UsersN struct {
	original   *usersOriginal
	usersModel *UsersModel

	Id                 null.Int    `json:"id"`
	Email              null.String `json:"email"`
	Phone              null.String `json:"phone"`
	Password           null.String `json:"-"`
	Realname           null.String `json:"realname"`
	UnionId            null.String `json:"union_id"`
	Avatar             null.String `json:"avatar"`
	AppleUid           null.String `json:"apple_uid"`
	InvitedBy          null.Int    `json:"invite_by"`
	InviteCode         null.String `json:"invite_code"`
	UserType           null.Int    `json:"user_type"`
	PreferSigninMethod null.String `json:"prefer_signin_method"`
	Status             null.String `json:"status"`
	CreatedAt          null.Time
	UpdatedAt          null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *UsersN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for Users
func (inst *UsersN) SetModel(usersModel *UsersModel) {
	inst.usersModel = usersModel
}

// usersOriginal is an object which stores original Users from database
type usersOriginal struct {
	Id                 null.Int
	Email              null.String
	Phone              null.String
	Password           null.String
	Realname           null.String
	UnionId            null.String
	Avatar             null.String
	AppleUid           null.String
	InvitedBy          null.Int
	InviteCode         null.String
	UserType           null.Int
	PreferSigninMethod null.String
	Status             null.String
	CreatedAt          null.Time
	UpdatedAt          null.Time
}

// Staled identify whether the object has been modified
func (inst *UsersN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &usersOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.Email != inst.original.Email {
			return true
		}
		if inst.Phone != inst.original.Phone {
			return true
		}
		if inst.Password != inst.original.Password {
			return true
		}
		if inst.Realname != inst.original.Realname {
			return true
		}
		if inst.UnionId != inst.original.UnionId {
			return true
		}
		if inst.Avatar != inst.original.Avatar {
			return true
		}
		if inst.AppleUid != inst.original.AppleUid {
			return true
		}
		if inst.InvitedBy != inst.original.InvitedBy {
			return true
		}
		if inst.InviteCode != inst.original.InviteCode {
			return true
		}
		if inst.UserType != inst.original.UserType {
			return true
		}
		if inst.PreferSigninMethod != inst.original.PreferSigninMethod {
			return true
		}
		if inst.Status != inst.original.Status {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "email":
				if inst.Email != inst.original.Email {
					return true
				}
			case "phone":
				if inst.Phone != inst.original.Phone {
					return true
				}
			case "password":
				if inst.Password != inst.original.Password {
					return true
				}
			case "realname":
				if inst.Realname != inst.original.Realname {
					return true
				}
			case "union_id":
				if inst.UnionId != inst.original.UnionId {
					return true
				}
			case "avatar":
				if inst.Avatar != inst.original.Avatar {
					return true
				}
			case "apple_uid":
				if inst.AppleUid != inst.original.AppleUid {
					return true
				}
			case "invited_by":
				if inst.InvitedBy != inst.original.InvitedBy {
					return true
				}
			case "invite_code":
				if inst.InviteCode != inst.original.InviteCode {
					return true
				}
			case "user_type":
				if inst.UserType != inst.original.UserType {
					return true
				}
			case "prefer_signin_method":
				if inst.PreferSigninMethod != inst.original.PreferSigninMethod {
					return true
				}
			case "status":
				if inst.Status != inst.original.Status {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *UsersN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &usersOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.Email != inst.original.Email {
			kv["email"] = inst.Email
		}
		if inst.Phone != inst.original.Phone {
			kv["phone"] = inst.Phone
		}
		if inst.Password != inst.original.Password {
			kv["password"] = inst.Password
		}
		if inst.Realname != inst.original.Realname {
			kv["realname"] = inst.Realname
		}
		if inst.UnionId != inst.original.UnionId {
			kv["union_id"] = inst.UnionId
		}
		if inst.Avatar != inst.original.Avatar {
			kv["avatar"] = inst.Avatar
		}
		if inst.AppleUid != inst.original.AppleUid {
			kv["apple_uid"] = inst.AppleUid
		}
		if inst.InvitedBy != inst.original.InvitedBy {
			kv["invited_by"] = inst.InvitedBy
		}
		if inst.InviteCode != inst.original.InviteCode {
			kv["invite_code"] = inst.InviteCode
		}
		if inst.UserType != inst.original.UserType {
			kv["user_type"] = inst.UserType
		}
		if inst.PreferSigninMethod != inst.original.PreferSigninMethod {
			kv["prefer_signin_method"] = inst.PreferSigninMethod
		}
		if inst.Status != inst.original.Status {
			kv["status"] = inst.Status
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "email":
				if inst.Email != inst.original.Email {
					kv["email"] = inst.Email
				}
			case "phone":
				if inst.Phone != inst.original.Phone {
					kv["phone"] = inst.Phone
				}
			case "password":
				if inst.Password != inst.original.Password {
					kv["password"] = inst.Password
				}
			case "realname":
				if inst.Realname != inst.original.Realname {
					kv["realname"] = inst.Realname
				}
			case "union_id":
				if inst.UnionId != inst.original.UnionId {
					kv["union_id"] = inst.UnionId
				}
			case "avatar":
				if inst.Avatar != inst.original.Avatar {
					kv["avatar"] = inst.Avatar
				}
			case "apple_uid":
				if inst.AppleUid != inst.original.AppleUid {
					kv["apple_uid"] = inst.AppleUid
				}
			case "invited_by":
				if inst.InvitedBy != inst.original.InvitedBy {
					kv["invited_by"] = inst.InvitedBy
				}
			case "invite_code":
				if inst.InviteCode != inst.original.InviteCode {
					kv["invite_code"] = inst.InviteCode
				}
			case "user_type":
				if inst.UserType != inst.original.UserType {
					kv["user_type"] = inst.UserType
				}
			case "prefer_signin_method":
				if inst.PreferSigninMethod != inst.original.PreferSigninMethod {
					kv["prefer_signin_method"] = inst.PreferSigninMethod
				}
			case "status":
				if inst.Status != inst.original.Status {
					kv["status"] = inst.Status
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *UsersN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.usersModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.usersModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a users
func (inst *UsersN) Delete(ctx context.Context) error {
	if inst.usersModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.usersModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *UsersN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type usersScope struct {
	name  string
	apply func(builder query.Condition)
}

var usersGlobalScopes = make([]usersScope, 0)
var usersLocalScopes = make([]usersScope, 0)

// AddGlobalScopeForUsers assign a global scope to a model
func AddGlobalScopeForUsers(name string, apply func(builder query.Condition)) {
	usersGlobalScopes = append(usersGlobalScopes, usersScope{name: name, apply: apply})
}

// AddLocalScopeForUsers assign a local scope to a model
func AddLocalScopeForUsers(name string, apply func(builder query.Condition)) {
	usersLocalScopes = append(usersLocalScopes, usersScope{name: name, apply: apply})
}

func (m *UsersModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range usersGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range usersLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *UsersModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *UsersModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type Users struct {
	Id                 int64  `json:"id"`
	Email              string `json:"email"`
	Phone              string `json:"phone"`
	Password           string `json:"-"`
	Realname           string `json:"realname"`
	UnionId            string `json:"union_id"`
	Avatar             string `json:"avatar"`
	AppleUid           string `json:"apple_uid"`
	InvitedBy          int64  `json:"invite_by"`
	InviteCode         string `json:"invite_code"`
	UserType           int64  `json:"user_type"`
	PreferSigninMethod string `json:"prefer_signin_method"`
	Status             string `json:"status"`
	CreatedAt          time.Time
	UpdatedAt          time.Time
}

func (w Users) ToUsersN(allows ...string) UsersN {
	if len(allows) == 0 {
		return UsersN{

			Id:                 null.IntFrom(int64(w.Id)),
			Email:              null.StringFrom(w.Email),
			Phone:              null.StringFrom(w.Phone),
			Password:           null.StringFrom(w.Password),
			Realname:           null.StringFrom(w.Realname),
			UnionId:            null.StringFrom(w.UnionId),
			Avatar:             null.StringFrom(w.Avatar),
			AppleUid:           null.StringFrom(w.AppleUid),
			InvitedBy:          null.IntFrom(int64(w.InvitedBy)),
			InviteCode:         null.StringFrom(w.InviteCode),
			UserType:           null.IntFrom(int64(w.UserType)),
			PreferSigninMethod: null.StringFrom(w.PreferSigninMethod),
			Status:             null.StringFrom(w.Status),
			CreatedAt:          null.TimeFrom(w.CreatedAt),
			UpdatedAt:          null.TimeFrom(w.UpdatedAt),
		}
	}

	res := UsersN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "email":
			res.Email = null.StringFrom(w.Email)
		case "phone":
			res.Phone = null.StringFrom(w.Phone)
		case "password":
			res.Password = null.StringFrom(w.Password)
		case "realname":
			res.Realname = null.StringFrom(w.Realname)
		case "union_id":
			res.UnionId = null.StringFrom(w.UnionId)
		case "avatar":
			res.Avatar = null.StringFrom(w.Avatar)
		case "apple_uid":
			res.AppleUid = null.StringFrom(w.AppleUid)
		case "invited_by":
			res.InvitedBy = null.IntFrom(int64(w.InvitedBy))
		case "invite_code":
			res.InviteCode = null.StringFrom(w.InviteCode)
		case "user_type":
			res.UserType = null.IntFrom(int64(w.UserType))
		case "prefer_signin_method":
			res.PreferSigninMethod = null.StringFrom(w.PreferSigninMethod)
		case "status":
			res.Status = null.StringFrom(w.Status)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w Users) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *UsersN) ToUsers() Users {
	return Users{

		Id:                 w.Id.Int64,
		Email:              w.Email.String,
		Phone:              w.Phone.String,
		Password:           w.Password.String,
		Realname:           w.Realname.String,
		UnionId:            w.UnionId.String,
		Avatar:             w.Avatar.String,
		AppleUid:           w.AppleUid.String,
		InvitedBy:          w.InvitedBy.Int64,
		InviteCode:         w.InviteCode.String,
		UserType:           w.UserType.Int64,
		PreferSigninMethod: w.PreferSigninMethod.String,
		Status:             w.Status.String,
		CreatedAt:          w.CreatedAt.Time,
		UpdatedAt:          w.UpdatedAt.Time,
	}
}

// UsersModel is a model which encapsulates the operations of the object
type UsersModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var usersTableName = "users"

// UsersTable return table name for Users
func UsersTable() string {
	return usersTableName
}

const (
	FieldUsersId                 = "id"
	FieldUsersEmail              = "email"
	FieldUsersPhone              = "phone"
	FieldUsersPassword           = "password"
	FieldUsersRealname           = "realname"
	FieldUsersUnionId            = "union_id"
	FieldUsersAvatar             = "avatar"
	FieldUsersAppleUid           = "apple_uid"
	FieldUsersInvitedBy          = "invited_by"
	FieldUsersInviteCode         = "invite_code"
	FieldUsersUserType           = "user_type"
	FieldUsersPreferSigninMethod = "prefer_signin_method"
	FieldUsersStatus             = "status"
	FieldUsersCreatedAt          = "created_at"
	FieldUsersUpdatedAt          = "updated_at"
)

// UsersFields return all fields in Users model
func UsersFields() []string {
	return []string{
		"id",
		"email",
		"phone",
		"password",
		"realname",
		"union_id",
		"avatar",
		"apple_uid",
		"invited_by",
		"invite_code",
		"user_type",
		"prefer_signin_method",
		"status",
		"created_at",
		"updated_at",
	}
}

func SetUsersTable(tableName string) {
	usersTableName = tableName
}

// NewUsersModel create a UsersModel
func NewUsersModel(db query.Database) *UsersModel {
	return &UsersModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           usersTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *UsersModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *UsersModel) clone() *UsersModel {
	return &UsersModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *UsersModel) WithoutGlobalScopes(names ...string) *UsersModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *UsersModel) WithLocalScopes(names ...string) *UsersModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *UsersModel) Condition(builder query.SQLBuilder) *UsersModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *UsersModel) Find(ctx context.Context, id int64) (*UsersN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *UsersModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *UsersModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *UsersModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]UsersN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *UsersModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]UsersN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"email",
			"phone",
			"password",
			"realname",
			"union_id",
			"avatar",
			"apple_uid",
			"invited_by",
			"invite_code",
			"user_type",
			"prefer_signin_method",
			"status",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "email":
			selectFields = append(selectFields, f)
		case "phone":
			selectFields = append(selectFields, f)
		case "password":
			selectFields = append(selectFields, f)
		case "realname":
			selectFields = append(selectFields, f)
		case "union_id":
			selectFields = append(selectFields, f)
		case "avatar":
			selectFields = append(selectFields, f)
		case "apple_uid":
			selectFields = append(selectFields, f)
		case "invited_by":
			selectFields = append(selectFields, f)
		case "invite_code":
			selectFields = append(selectFields, f)
		case "user_type":
			selectFields = append(selectFields, f)
		case "prefer_signin_method":
			selectFields = append(selectFields, f)
		case "status":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*UsersN, []interface{}) {
		var usersVar UsersN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &usersVar.Id)
			case "email":
				scanFields = append(scanFields, &usersVar.Email)
			case "phone":
				scanFields = append(scanFields, &usersVar.Phone)
			case "password":
				scanFields = append(scanFields, &usersVar.Password)
			case "realname":
				scanFields = append(scanFields, &usersVar.Realname)
			case "union_id":
				scanFields = append(scanFields, &usersVar.UnionId)
			case "avatar":
				scanFields = append(scanFields, &usersVar.Avatar)
			case "apple_uid":
				scanFields = append(scanFields, &usersVar.AppleUid)
			case "invited_by":
				scanFields = append(scanFields, &usersVar.InvitedBy)
			case "invite_code":
				scanFields = append(scanFields, &usersVar.InviteCode)
			case "user_type":
				scanFields = append(scanFields, &usersVar.UserType)
			case "prefer_signin_method":
				scanFields = append(scanFields, &usersVar.PreferSigninMethod)
			case "status":
				scanFields = append(scanFields, &usersVar.Status)
			case "created_at":
				scanFields = append(scanFields, &usersVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &usersVar.UpdatedAt)
			}
		}

		return &usersVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	userss := make([]UsersN, 0)
	for rows.Next() {
		usersReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		usersReal.original = &usersOriginal{}
		_ = query.Copy(usersReal, usersReal.original)

		usersReal.SetModel(m)
		userss = append(userss, *usersReal)
	}

	return userss, nil
}

// First return first result for given query
func (m *UsersModel) First(ctx context.Context, builders ...query.SQLBuilder) (*UsersN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new users to database
func (m *UsersModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all userss to database
func (m *UsersModel) SaveAll(ctx context.Context, userss []UsersN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, users := range userss {
		id, err := m.Save(ctx, users)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a users to database
func (m *UsersModel) Save(ctx context.Context, users UsersN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, users.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new users or update it when it has a id > 0
func (m *UsersModel) SaveOrUpdate(ctx context.Context, users UsersN, onlyFields ...string) (id int64, updated bool, err error) {
	if users.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, users.Id.Int64, users, onlyFields...)
		return users.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, users, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *UsersModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *UsersModel) Update(ctx context.Context, builder query.SQLBuilder, users UsersN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, users.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *UsersModel) UpdateById(ctx context.Context, id int64, users UsersN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, users.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *UsersModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *UsersModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
