package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// UserCustomN is a UserCustom object, all fields are nullable
type UserCustomN struct {
	original        *userCustomOriginal
	userCustomModel *UserCustomModel

	Id        null.Int    `json:"id"`
	UserId    null.Int    `json:"user_id"`
	Config    null.String `json:"config"`
	CreatedAt null.Time
	UpdatedAt null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *UserCustomN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for UserCustom
func (inst *UserCustomN) SetModel(userCustomModel *UserCustomModel) {
	inst.userCustomModel = userCustomModel
}

// userCustomOriginal is an object which stores original UserCustom from database
type userCustomOriginal struct {
	Id        null.Int
	UserId    null.Int
	Config    null.String
	CreatedAt null.Time
	UpdatedAt null.Time
}

// Staled identify whether the object has been modified
func (inst *UserCustomN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &userCustomOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.Config != inst.original.Config {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "config":
				if inst.Config != inst.original.Config {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *UserCustomN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &userCustomOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.Config != inst.original.Config {
			kv["config"] = inst.Config
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "config":
				if inst.Config != inst.original.Config {
					kv["config"] = inst.Config
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *UserCustomN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.userCustomModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.userCustomModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a user_custom
func (inst *UserCustomN) Delete(ctx context.Context) error {
	if inst.userCustomModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.userCustomModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *UserCustomN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type userCustomScope struct {
	name  string
	apply func(builder query.Condition)
}

var userCustomGlobalScopes = make([]userCustomScope, 0)
var userCustomLocalScopes = make([]userCustomScope, 0)

// AddGlobalScopeForUserCustom assign a global scope to a model
func AddGlobalScopeForUserCustom(name string, apply func(builder query.Condition)) {
	userCustomGlobalScopes = append(userCustomGlobalScopes, userCustomScope{name: name, apply: apply})
}

// AddLocalScopeForUserCustom assign a local scope to a model
func AddLocalScopeForUserCustom(name string, apply func(builder query.Condition)) {
	userCustomLocalScopes = append(userCustomLocalScopes, userCustomScope{name: name, apply: apply})
}

func (m *UserCustomModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range userCustomGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range userCustomLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *UserCustomModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *UserCustomModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type UserCustom struct {
	Id        int64  `json:"id"`
	UserId    int64  `json:"user_id"`
	Config    string `json:"config"`
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (w UserCustom) ToUserCustomN(allows ...string) UserCustomN {
	if len(allows) == 0 {
		return UserCustomN{

			Id:        null.IntFrom(int64(w.Id)),
			UserId:    null.IntFrom(int64(w.UserId)),
			Config:    null.StringFrom(w.Config),
			CreatedAt: null.TimeFrom(w.CreatedAt),
			UpdatedAt: null.TimeFrom(w.UpdatedAt),
		}
	}

	res := UserCustomN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "config":
			res.Config = null.StringFrom(w.Config)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w UserCustom) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *UserCustomN) ToUserCustom() UserCustom {
	return UserCustom{

		Id:        w.Id.Int64,
		UserId:    w.UserId.Int64,
		Config:    w.Config.String,
		CreatedAt: w.CreatedAt.Time,
		UpdatedAt: w.UpdatedAt.Time,
	}
}

// UserCustomModel is a model which encapsulates the operations of the object
type UserCustomModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var userCustomTableName = "user_custom"

// UserCustomTable return table name for UserCustom
func UserCustomTable() string {
	return userCustomTableName
}

const (
	FieldUserCustomId        = "id"
	FieldUserCustomUserId    = "user_id"
	FieldUserCustomConfig    = "config"
	FieldUserCustomCreatedAt = "created_at"
	FieldUserCustomUpdatedAt = "updated_at"
)

// UserCustomFields return all fields in UserCustom model
func UserCustomFields() []string {
	return []string{
		"id",
		"user_id",
		"config",
		"created_at",
		"updated_at",
	}
}

func SetUserCustomTable(tableName string) {
	userCustomTableName = tableName
}

// NewUserCustomModel create a UserCustomModel
func NewUserCustomModel(db query.Database) *UserCustomModel {
	return &UserCustomModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           userCustomTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *UserCustomModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *UserCustomModel) clone() *UserCustomModel {
	return &UserCustomModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *UserCustomModel) WithoutGlobalScopes(names ...string) *UserCustomModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *UserCustomModel) WithLocalScopes(names ...string) *UserCustomModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *UserCustomModel) Condition(builder query.SQLBuilder) *UserCustomModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *UserCustomModel) Find(ctx context.Context, id int64) (*UserCustomN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *UserCustomModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *UserCustomModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *UserCustomModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]UserCustomN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *UserCustomModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]UserCustomN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"user_id",
			"config",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "config":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*UserCustomN, []interface{}) {
		var userCustomVar UserCustomN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &userCustomVar.Id)
			case "user_id":
				scanFields = append(scanFields, &userCustomVar.UserId)
			case "config":
				scanFields = append(scanFields, &userCustomVar.Config)
			case "created_at":
				scanFields = append(scanFields, &userCustomVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &userCustomVar.UpdatedAt)
			}
		}

		return &userCustomVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	userCustoms := make([]UserCustomN, 0)
	for rows.Next() {
		userCustomReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		userCustomReal.original = &userCustomOriginal{}
		_ = query.Copy(userCustomReal, userCustomReal.original)

		userCustomReal.SetModel(m)
		userCustoms = append(userCustoms, *userCustomReal)
	}

	return userCustoms, nil
}

// First return first result for given query
func (m *UserCustomModel) First(ctx context.Context, builders ...query.SQLBuilder) (*UserCustomN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new user_custom to database
func (m *UserCustomModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all user_customs to database
func (m *UserCustomModel) SaveAll(ctx context.Context, userCustoms []UserCustomN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, userCustom := range userCustoms {
		id, err := m.Save(ctx, userCustom)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a user_custom to database
func (m *UserCustomModel) Save(ctx context.Context, userCustom UserCustomN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, userCustom.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new user_custom or update it when it has a id > 0
func (m *UserCustomModel) SaveOrUpdate(ctx context.Context, userCustom UserCustomN, onlyFields ...string) (id int64, updated bool, err error) {
	if userCustom.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, userCustom.Id.Int64, userCustom, onlyFields...)
		return userCustom.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, userCustom, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *UserCustomModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *UserCustomModel) Update(ctx context.Context, builder query.SQLBuilder, userCustom UserCustomN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, userCustom.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *UserCustomModel) UpdateById(ctx context.Context, id int64, userCustom UserCustomN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, userCustom.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *UserCustomModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *UserCustomModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
